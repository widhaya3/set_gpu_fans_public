#!/bin/bash
#
#  Copyright 2016 Boris Dimitrov <dimiroll@gmail.com>.
#
#  Script to control Nvidia GPU fans.   Use at your own risk!
#
#  Tested with driver version 367 and cuda8rc on Ubuntu 16.  September 2016.
#
#  PREREQUISITES
#
#      GPU must be in persistence mode, ideally by running
#
#          /usr/bin/start-nvidia-persistenced
#
#      X server must be running (possibly one per GPU).
#      On headless systems, start X with the cool_gpu script.
#
#  To set fan speed to 65% on GPU 0 for Display :0,
#
#       nvscmd 65 -display :0
#
#  To restore automatic fan control,
#
#       nvscmd stop -display :0
#
#   To run forever enforcing the heuristic below (useful from xinit):
#
#       nvscmd run_forever -display :0
#
#   Executes heuristic for slightly more aggressive cooling, though
#   still not super loud (fine to keep in the next room).  A much
#   louder config could be used in a datacenter.  The difference on
#   my Titan X Pascal running for an hour+ compute job (GPU using
#   roughly ~175 watts, all compute no mem) at room temp (22 Celsius)
#
#        fan set to 100% -- runs at 97.2% of GPU peak freq (1847 out of 1901 MHz)
#                           too loud even for next room
#
#        this heuristic --- sustains 95.8% of peak freq (1822 out of 1901 MHz),
#                           quiet enough to be in the next room with open door,
#                           and whisper quiet when nothing running on GPU;
#                           temp around 63 degrees Celsius
#
#        default       ---  sustains 94.5% of peak freq (1797 out of 1901 MHz)
#                           and impressively quiet but with GPU temp around 73C,
#                           it's too hot to touch case near GPU exhaust
#
#   Relative to default, the heuristic improves perf by factor of 1.014 (1.4%),
#   and makes case cool enough that touching won't burn your finger.
#
#   Relative to 100% fan, the heuristic sacrafices 1.4% of perf to achieve
#   humanly tolerable noise levels.
#

DISP=":0"
while [ "$1" ]; do
	if [ "x$1" == "xrun_forever" ]; then
		RUN_FOREVER=1
	elif [ "x$1" == "xstop" ]; then
    	TARGET=-1
	elif [ "x$1" == "x" ] || [ "x$1" == "xstart" ]; then
    	# this means "use heuristic"
    	TARGET=-3
	elif [ "x$1" == "x-display" ]; then
		shift
		DISP=$1
	else
    	TARGET=$1
	fi
	shift
done
re='^-?[0-9]+([.][0-9]+)?$'
if ! [[ $TARGET =~ $re ]] ; then
	TARGET=-1
fi

SRCDIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
. ${SRCDIR}/settings

# -10 aka null
LAST_TARGET=-10
LAST_FRIENDLY_TARGET="UNKNOWN"

DISP_NO=${DISP:1}

EXTRA_RUN_ONCE=${EX_RUN_ONCE}-${DISP_NO}.cfg
if [ ! -f "$EXTRA_RUN_ONCE" ]; then
	cat << EOF > "$EXTRA_RUN_ONCE"
#!/bin/bash

#$NVSET -a "[gpu:${DISP_NO}]/GPUPowerMizerMode=1" $*
#$NVSET -a "[gpu:${DISP_NO}]/GPUGraphicsClockOffset[3]=100" $* # 1060=100,
#$NVSET -a "[gpu:${DISP_NO}]/GPUMemoryTransferRateOffset[3]=900" $* # 1060=900,
EOF
	chmod 755 $EXTRA_RUN_ONCE
else
	$EXTRA_RUN_ONCE
fi

EXTRA_RUN_LOOP=${EX_RUN_LOOP}-${DISP_NO}.cfg
if [ ! -f "$EXTRA_RUN_LOOP" ]; then
	cat << EOF > "$EXTRA_RUN_LOOP"
#!/bin/bash

# for testing
EOF
	chmod 755 $EXTRA_RUN_LOOP
fi

ONCE=1

while [ "$RUN_FOREVER" ] || [ "$ONCE" -gt 0 ]; do

    if [ "$TARGET" == "-3" ]; then
        # execute heuristic
		TEMP=`$NVSMI dmon -i ${DISP_NO} -s p -c 1 | sort -n -k3 | tail -1 | awk '{ printf $3 }'`
        TARGET=-2
		if [ $TEMP -lt 30 ]; then
			TARGET=-1
		elif [ $TEMP -lt 40 ]; then
			TARGET=50
		elif [ $TEMP -lt 50 ]; then
			TARGET=60
		elif [ $TEMP -lt 60 ]; then
			TARGET=70
		elif [ $TEMP -lt 65 ]; then
			TARGET=80
		elif [ $TEMP -lt 70 ]; then
			TARGET=90
		else
			TARGET=100
		fi
        if [ $TARGET -eq -2 ] || [ "$TARGET" == "$LAST_TARGET" ] || [ "$TARGET" == "$LAST_FRIENDLY_TARGET" ]; then
            echo "Current temperature is ${TEMP}.  No adjustments needed."
		elif [ $TARGET -ge 0 ]; then
            echo "Current temperature is ${TEMP}.  Setting fan speed to ${TARGET} (from ${LAST_FRIENDLY_TARGET})."
        else
            echo "Current temperature is ${TEMP}.  Setting fan speed to AUTO."            
        fi
    fi

    if [ "$LAST_TARGET" != "$TARGET" ] && [ "$LAST_FRIENDLY_TARGET" != "$TARGET" ]; then
        # relinquish fan speed control back to the system
        if [ $TARGET -eq -1 ]; then
            $NVSET -a "[gpu:${DISP_NO}]/GPUFanControlState=0"  $*
        fi
    
        # set fan speed on primary GPU to TARGET
        if [ $TARGET -ge 0 ]; then
            $NVSET -a "[gpu:${DISP_NO}]/GPUFanControlState=1" -a "[fan:${DISP_NO}]/GPUTargetFanSpeed=${TARGET}" $*
			$EXTRA_RUN_LOOP
        fi
	fi

	LAST_TARGET=$TARGET
	TARGET=-3
    
    if [ $LAST_TARGET -ge 0 ]; then
		LAST_FRIENDLY_TARGET=$LAST_TARGET
    elif [ $LAST_TARGET -eq -1 ]; then
		LAST_FRIENDLY_TARGET="AUTO"
    elif [ $LAST_TARGET -lt -2 ]; then
    	# -2 means preserve
		LAST_FRIENDLY_TARGET="UNKNOWN"
	fi

	if [ $ONCE -gt 0 ]; then
		ONCE=$(( ONCE-1 ))
	fi

    sleep 5

done


